name: cicd
on:
  push:
    paths:
      - "src/**"

env:
  AWS_REGION : ap-northeast-2
  ECR_REPOSITORY: gomgomdiary
  ECS_CLUSTER: gomgom_cluster
  ECS_SERVICE: gomgom_service2
  ECS_TASK_DEFINITION: ./.aws/task-definition.json
  CONTAINER_NAME: gomgom

permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: test using docker compose
        run: docker-compose -p gomgom_test -f docker-compose.test.yml up --build --force-recreate --abort-on-container-exit


  deploy:
    if: github.ref == 'refs/heads/main'
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::988606121037:role/gomgomdiary_gomgomback_oidc
          role-session-name: rolesession
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Report status to discord
        uses: tsickert/discord-webhook@v5.3.0
        with:
          webhook-url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          content: |-
            :harmony: Successfully deployed
            Commit: `${{ github.sha }}`

      - name: Report failure to discord
        uses: tsickert/discord-webhook@v5.3.0
        if: failure()
        with:
          webhook-url: ${{ secrets.DISCORD_WEBHOOK }}
          content: |-
            :broken_heart: [Failed to deploy](<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}>)
            Commit: `${{ github.sha }}`
